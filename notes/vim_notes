https://www.ibm.com/developerworks/linux/library/l-vim-script-1/index.html?ca=drs-
 
imperative language
 
:help function-list
 
Running Vim scripts:
:source /full/path/to/scriptfile.vim
    - by default, ~/.vimrc is ran everytime vim is opened up
 
 
functions:
function! functionName(arg1, arg2, arg3)
call functionName(arg1, arg2, arg3)
 
 
 
formatting
Use backslash to put multiple lines into one:
    eg) this will be treated as a single line
        call functionName(
        \                   arg1,
        \                   arg2,
        \                   arg3,
        \                )
Use pipe to seperate a line into multiple lines
    eg) this will be treated as multiple lines (vertical bar is like a semicolon)
        echo "Starting..." | call Phase(1) | call Phase(2) | echo "Done"
           
Comments:
    Starts with a single quote and continues till the end of the line:
    eg)
        "Start of the comment till the end of the line...
    caution: Watch out for the conflicts!!
 
 
Values and variables:
    let variableNameString = "String"                       scalar
    let variableNameString = 'String'                       scalar
    let variableNameNumber = 169                            scalar
    let variableNameList = [ 'this', 'is', 'list', 123 ]    list
    let variableNameMap = { 'key1':1234, 'key2':'String' }  dictionary
Strings can be both double quoted or single quoted.
    Double quotes honor special characters like "\n", "\t" "\<ESC>" etc
    Single quotes take everything literally
Variable types, once assigned, are permanent and strictly enforced at runtime.
   
    Scope:
    g:varnaeme : global
    l:varname : local to the current function
    a:varname : parameter of the current function
    s:varname : local to current script file
    v:varname : one that Vim predefines
    ----
    w:varname : local to current editor window?
    t:varname : local to the current editor tab
    b:varname : local to the current editor buffer
    ---
    By default, a variable is scoped to the function in which it is first assigned to, or is global if occurs outside any function
     Can be declared explicitly using above.
 
    Pseudovariables
    &varname  : A Vim option (local option if defined, otherwise global)
    &l:varname: A local Vim option      (local?)
    &g:varname: A global Vim option     (vimrc?)
    @varname  : A Vim register
    $varname  : An environment Variable (System?)
 
    expressions
    let var = expr
    let var += expr (numeric add and assign)
    let var -= expr (numeric subtract and assign)
    let var .= expr (string concat and assign)
    Ternary operator bool ? expr if true: expr if false
    or/and = || / &&
    logical NOT = !bool
    equality: ==, !=, >, >/, <, <=
    Numeric addition/sub: num +/- num
    String concatentation: str.str
    mult/div/mod: num (*|/|%) num
    convert to num: +num
 
 
 
------
Functions
 
format:
function FunctionName(arg1, arg2)
    body
    return result
endfunction
 
redeclaring variables:
function! s:PreviousFunctionNam(...)
    for nextval in a:000    "a:000 is the list of arguments
endfunction
 
Functions will always return 0 if nothing is returned. It needs to start in uppercase.
   
 
 
vim notes
    have a template to print basic thigns...
    will autosave with CPSC###_note_#<_TOPIC IF ANY>
    also will have one huge note of all.
 
 
-------
Lists
lists are like array in vim. You can edit it directly like an array
let data = [1,2,3,"seve"]
data[1] .= "n"  | [1,2,3,"seven"]
 
aliasing list will just make another variable that points to the same place
ex)
let datacp = data
And changing datacp would change data as well. use datacp = copy(data) does a shallow copy
                                               use deepcopt(data) for a deep copy.
check list functions for more info
:help function-list
 
----------
Dictionaries
let dict = {}   " Empty dictionary
let dict2 = { 'a':0, 'b':1, 'c':3 }
access it by indexing the key
    let result = dict2['b']
        result = 1
    will return an exception if key not found. Can use get function for safe get
    let result = get(dict2, 'nonexistant')
        returns 0
can assign to dictionary like this as well: (assuming dict as initialized)
let dict.name = 'Bram'
let dict.acct = 123007
 Some dictionary functions:
    keys(dict)
    values(dict)
    items(dict)  "returns a list of lists, where each inner list has exacrlt two elements:
                        " one key and the corresponding value.
    for [next_key, next_val] in items(dict)
        let result = process(next_val)
        echo "result for " next_key " is " result
    endfor
   
----------
Vim event handeling
 
> vim
    BufWinEnter     (create a default window)
    BufEnter        (create a default buffer)
    VimEnter        (start the Vim session):edit example.txt
    BufNew          (create a new buffer to contain demo.txt)
    BufAdd          (add that new buffer to the sessionâ€™s buffer list)
    BufLeave        (exit the default buffer)
    BufWinLeave     (exit the default window)
    BufUnload       (remove the default buffer from the buffer list)
    BufDelete       (deallocate the default buffer)
    BufReadCmd      (read the contexts of demo.txt into the new buffer)
    BufEnter        (activate the new buffer)
    BufWinEnter     (activate the new buffer's window)i
    InsertEnter     (swap into Insert mode)
           
    CursorMovedI    (insert a character)
    CursorMovedI    (insert a character)
    CursorMovedI    (insert a character)
    CursorMovedI    (insert a character)
    CursorMovedI    (insert a character)<ESC>
    InsertLeave     (swap back to Normal mode):wq
    BufWriteCmd     (save the buffer contents back to disk)
    BufWinLeave     (exit the buffer's window)
    BufUnload       (remove the buffer from the buffer list)
    VimLeavePre     (get ready to quit Vim)
    VimLeave        (quit Vim)
:help autocmd-events for more info.
for detailed, :help autocmd-events-events-abc
   sadfas
Mechanism vim provides for intercepting events in known as the autocommand
autocomand EventName filename_pattern :command
    where EventName is one of the 78 valid Vim event names
 
 
vim personal comments
    -in insert mode, remap //j to something else?
 
Caps lock ALERT
    show underneath when you are caps locking.
 
change tab names to be more useful
 


